{
  "hash": "02bac7ac40abe2672ac76710466ba319",
  "result": {
    "markdown": "---\ntitle: \"Peacekeeping Missions and Event History (AKA Survival) Analysis\"\n# subtitle: \"Maximum Likelihood Estimation\"\nauthor: \"Michael L. Davies\"\ndate: \"Aug 08, 2023\"\n#format: docx\nformat:\n  html:\n    # embed-resources: true\n    code-fold: true\n    code-tools:\n      source: false\n      toggle: true\n      caption: \"Show the code\"\n    code-summary: \"Show the code\"\n    # theme: flatly\n    # theme: slate\n    # keep-md: true\neditor: visual\ntoc: true\nnumber-sections: false\nexecute: \n  warning: false\n  message: false\n  error: false\n  echo: true\n---\n\n\n## War-type and peacekeeping mission duration\n\n![Image Source: https://peacekeeping.un.org/en/department-of-peace-operations](peacekeep_img.jpg)\n\nThis topic has been on my mind for a while. The relationship between war type and the duration of subsequent peacekeeping missions almost certainly varies widely. Specifically, I theorize (based on nothing but my gut) that civil wars have dynamics that exacerbate peacekeeping missions. Civil wars represent neighbors fighting for control of terrain and power over the respective inhabitants. Grievances commonly persist beyond the resolution of open conflict. Peace is fragile and vulnerable to spoilers, grudges, and revenge-seeking—all of which represent challenges to peacekeeping. On the other hand, generally speaking, interstate wars might have more clearly defined objectives and could be resolved more swiftly through diplomatic means or clearly defined peace agreements, leading to comparatively shorter peacekeeping mission durations.\n\n::: callout-tip\n## In short:\n\nWars vary widely in terms of internal and external dynamics—most of which linger as peacekeeping missions try to stabilize the situation. Is there a relationship between war type and peacekeeping mission duration?\n:::\n\nSo, here I will conduct a *parametric event history* (AKA survival) analysis utilizing UN peacekeeping data. I will two of the three conflict types: civil, interst, and icw.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\nlibrary(tidyverse)\nlibrary(flexsurv)\nlibrary(survival)\nlibrary(survminer)\nlibrary(ggsurvfit)\nlibrary(coxed)\n#library(texreg)\nsource('my_gg_theme.R')\n```\n:::\n\n\n\n\n::: callout-important\nI implemented all models in both R and Python (See respective tabs). The results, of course, are marginally different likely a result of rounding error. Therefore, I base all interpretations on the results from R for no good reason.\n:::\n\n------------------------------------------------------------------------\n\n## Load, Clean and Look at the Data\n\nIn the context of implementing a survival model using flexsurvreg() in R, the appropriate shape of the dataframe depends on how you want to model the relationship between the covariates and the survival outcome. Both dataframe structures you provided are valid, but they represent different ways of specifying the covariates in the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nun_df <- \n  read_dta('UNdata.dta') %>% \n  select(failed, duration, civil, interst, icw) %>%  \n  drop_na()\n\n# references\n# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5868723/\n# https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html#Kaplan-Meier_plots\n# https://lifelines.readthedocs.io/en/latest/lifelines.plotting.html\n\n# reshaping to experiment\nun_df_cat <- \n  un_df %>% \n  mutate(\n    wartype = factor(\n      if_else(civil == 1,\n              'civil',\n              if_else(interst == 1,\n                      'interst',\n                      'icw')))) %>%\n  mutate(wartype = \n           fct_relevel(wartype,\n                       \"icw\",\n                       \"civil\",\n                       \"interst\")) %>% \n  select(-c(civil, interst, icw))\n\n# Python requrres numeric\nun_df_num <- \n  un_df %>% \n  mutate(\n    wartype = \n      if_else(civil == 1,\n              1,\n              if_else(interst == 1,\n                      2,\n                      3))) %>% \n  select(-c(civil, interst, icw))\n\nun_df %>% \n  head() %>% \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n| failed| duration| civil| interst| icw|\n|------:|--------:|-----:|-------:|---:|\n|      1|        2|     0|       0|   1|\n|      1|        4|     1|       0|   0|\n|      1|        5|     0|       0|   1|\n|      1|        5|     1|       0|   0|\n|      1|        7|     0|       0|   1|\n|      1|        7|     0|       1|   0|\n:::\n:::\n\n\n## Kaplan-Meier Plot\n\n**Initial (descriptive) look at the data:** The survival probability reflects the likelihood of an individual surviving or not experiencing the event up to that time point. It ranges from 0 to 1, with 0 indicating no survival (event occurred) and 1 indicating complete survival (no event occurred). Each curve below represents a different group within the study, and we see distinct differences in survival probabilities between the groups.\n\n::: panel-tabset\n# R solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvfit2(Surv(duration, failed) ~ 1, data = un_df) %>% \n  ggsurvfit() +\n  labs(\n    x = \"Days\",\n    y = \"Survival probability\",\n    title = \"Peacekeeping missions: Overall survival probability\"\n  ) + \n  add_confidence_interval() +\n  add_risktable() +\n  my_gg_theme\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe can use the `summary()` to find the probability of surviving to 1 year, which is approximately 20%. (Note: the time variable in the data is actually in days, so we need to use times = 365.25)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(survfit(\n  Surv(duration, failed) ~ 1, \n  data = un_df), \n  times = 365.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall: survfit(formula = Surv(duration, failed) ~ 1, data = un_df)\n\n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n  365      3      39    0.196   0.063        0.105        0.369\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvfit2(Surv(duration, failed) ~ \n           civil + interst + icw, \n         data = un_df) %>% \n  ggsurvfit() +\n  labs(\n    x = \"Days\",\n    y = \"Survival probability\",\n    title = \"Peacekeeping missions: Survival probability by Type\"\n  ) + \n  add_risktable() +\n  my_gg_theme\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n# Python Solution\n\n[According to the Python documentation](https://lifelines.readthedocs.io/en/latest/lifelines.plotting.html), these plots show the survival function of the model plus it's area-under-the-curve (AUC) up until the point `t`. *The AUC is known as the restricted mean survival time (RMST).*\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom lifelines import GeneralizedGammaFitter, ExponentialFitter, WeibullFitter, CoxPHFitter, LogNormalFitter\nfrom lifelines import GeneralizedGammaRegressionFitter\n\nfrom lifelines.utils import restricted_mean_survival_time\nfrom lifelines.datasets import load_waltons\nfrom lifelines.plotting import rmst_plot, plot_lifetimes\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.plotting import rmst_plot\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# https://lifelines.readthedocs.io/en/latest/lifelines.plotting.html\n \ndf = r.un_df_cat\n\ntime_limit = 10\n\n# Create Kaplan-Meier fitted objects for each group\nkmf_civil = KaplanMeierFitter().\\\n    fit(df['duration'], df['failed']) # label='wartype'\n\nrmst_plot(kmf_civil, t=time_limit, show_censors=False)\n\nplt.xlabel('Time')\nplt.ylabel('RMST')\nplt.title('Overall Restricted Mean Survival Time (RMST) Plot - wide df')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# https://lifelines.readthedocs.io/en/latest/lifelines.plotting.html\n\ndf = r.un_df\n# Separate the data into groups based on 'civil' and 'interst'\nix_civil = df['civil'] == \"1\"\nix_interst = df['interst'] == \"1\"\nix_icw = df['icw'] == \"1\"\n\n# Create Kaplan-Meier fitted objects for each group\nkmf_civil = KaplanMeierFitter().\\\n    fit(df['duration'][ix_civil], df['failed'][ix_civil], label='Civil War')\n    \nkmf_interst = KaplanMeierFitter().\\\n    fit(df['duration'][ix_interst], df['failed'][ix_interst], label='Interstate War')\n    \nkmf_icw = KaplanMeierFitter().\\\n    fit(df['duration'][ix_icw], df['failed'][ix_icw], label='icw')\n\n# Plot RMST for each group\nax = plt.subplot(111)\nrmst_plot(kmf_civil, t=10, ax=ax, show_censors=False)\nrmst_plot(kmf_interst, t=10, ax=ax, show_censors=False)\nrmst_plot(kmf_icw, t=10, ax=ax, show_censors=False)\n\nplt.xlabel('Time')\nplt.ylabel('RMST')\nplt.title('Restricted Mean Survival Time (RMST) Plot')\nplt.legend()\nplt.show()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = r.un_df_cat\n# Separate the data into groups based on 'civil' and 'interst'\nix_civil = df['wartype'] == \"civil\"\nix_interst = df['wartype'] == \"interst\"\nix_icw = df['wartype'] == \"icw\"\ntime_limit = 10\n\n# Create Kaplan-Meier fitted objects for each group\nkmf_civil = KaplanMeierFitter().\\\n    fit(df['duration'][ix_civil], df['failed'][ix_civil], label='Civil War')\n    \nkmf_interst = KaplanMeierFitter().\\\n    fit(df['duration'][ix_interst], df['failed'][ix_interst], label='Interstate War')\n    \nkmf_icw = KaplanMeierFitter().\\\n    fit(df['duration'][ix_icw], df['failed'][ix_icw], label='icw')\n\n# Plot RMST for each group\nax = plt.subplot(111)\nrmst_plot(kmf_civil, t=time_limit, ax=ax, show_censors=False)\nrmst_plot(kmf_interst, t=time_limit, ax=ax, show_censors=False)\nrmst_plot(kmf_icw, t=time_limit, ax=ax, show_censors=False)\n\nplt.xlabel('Time')\nplt.ylabel('RMST')\nplt.title('Restricted Mean Survival Time (RMST) Plot')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n:::\n\n\n\n## Fit the model\n\n::: callout-tip\n## Prompt:\n\nEstimate a parametric survival model using the generalized gamma distribution and interpret the coefficient estimates.\n:::\n\n::: panel-tabset\n# R solution\n\nIntercept only (NULL) model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estimate parametric models - Generalized gamma\n\ngamma_fit <- flexsurvreg(\n  formula = \n    Surv(time = duration,\n         event = failed) ~ 1,\n  data = un_df,\n  dist = \"gengamma\"\n  )\n\ngamma_fit \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nflexsurvreg(formula = Surv(time = duration, event = failed) ~ \n    1, data = un_df, dist = \"gengamma\")\n\nEstimates: \n       est     L95%    U95%    se    \nmu      2.921   2.326   3.516   0.304\nsigma   1.325   1.034   1.698   0.168\nQ      -1.212  -2.003  -0.422   0.403\n\nN = 54,  Events: 39,  Censored: 15\nTotal time at risk: 3994\nLog-likelihood = -197.3282, df = 3\nAIC = 400.6565\n```\n:::\n:::\n\n\nWhen using a wide dataframe (stratified war type with cols = civil, interst, and icw), R produces:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estimate parametric models - Generalized gamma\n\ngamma_fit <- flexsurvreg(\n  formula = \n    Surv(time = duration,\n         event = failed) ~ civil + interst,\n  data = un_df,\n  dist = \"gengamma\"\n  )\n\ngamma_fit \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nflexsurvreg(formula = Surv(time = duration, event = failed) ~ \n    civil + interst, data = un_df, dist = \"gengamma\")\n\nEstimates: \n         data mean  est      L95%     U95%     se       exp(est)  L95%   \nmu            NA     3.0254   2.2488   3.8019   0.3962       NA        NA\nsigma         NA     1.3252   1.0380   1.6917   0.1651       NA        NA\nQ             NA    -0.9043  -1.8681   0.0595   0.4917       NA        NA\ncivil     0.2593    -0.2528  -1.1581   0.6525   0.4619   0.7766    0.3141\ninterst   0.1852     0.9711  -0.0535   1.9957   0.5228   2.6408    0.9479\n         U95%   \nmu            NA\nsigma         NA\nQ             NA\ncivil     1.9203\ninterst   7.3575\n\nN = 54,  Events: 39,  Censored: 15\nTotal time at risk: 3994\nLog-likelihood = -195.346, df = 5\nAIC = 400.692\n```\n:::\n:::\n\n\nI reshaped to include a `wartype` covariate that collapses the three types of war to war column -- primarily because this is the shape required for Python. Note that R can handle it either way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nun_df_cat %>% \n  head() %>% \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n| failed| duration|wartype |\n|------:|--------:|:-------|\n|      1|        2|icw     |\n|      1|        4|civil   |\n|      1|        5|icw     |\n|      1|        5|civil   |\n|      1|        7|icw     |\n|      1|        7|interst |\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estimate parametric models - Generalized gamma\n\ngamma_fit <- flexsurvreg(\n  formula = \n    Surv(time = duration,\n         event = failed) ~ wartype,\n  data = un_df_cat,\n  dist = \"gengamma\"\n  )\n\ngamma_fit \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nflexsurvreg(formula = Surv(time = duration, event = failed) ~ \n    wartype, data = un_df_cat, dist = \"gengamma\")\n\nEstimates: \n                data mean  est      L95%     U95%     se       exp(est)\nmu                   NA     3.0254   2.2488   3.8019   0.3962       NA \nsigma                NA     1.3252   1.0380   1.6917   0.1651       NA \nQ                    NA    -0.9043  -1.8681   0.0595   0.4917       NA \nwartypecivil     0.2593    -0.2528  -1.1581   0.6525   0.4619   0.7766 \nwartypeinterst   0.1852     0.9711  -0.0535   1.9957   0.5228   2.6408 \n                L95%     U95%   \nmu                   NA       NA\nsigma                NA       NA\nQ                    NA       NA\nwartypecivil     0.3141   1.9203\nwartypeinterst   0.9479   7.3575\n\nN = 54,  Events: 39,  Censored: 15\nTotal time at risk: 3994\nLog-likelihood = -195.346, df = 5\nAIC = 400.692\n```\n:::\n:::\n\n\n**Accelerated Failure Time Models**:\n\nAssumption: The accelerated failure time (AFT) model assumes that the covariates have a multiplicative effect on the survival time or the time-to-event variable. In other words, the model assumes that the covariates accelerate or decelerate the time scale in a linear way.\n\n**Civil War**\n\nFor an AFT model, the coefficient (call it $\\beta_1$) represents the log of the time ratio associated with the covariate. In this case, the covariate `civil1` is binary, and it compares the effect of being in the group `civil1` (compared to the reference group `civil0`) on the survival time. Since the coefficient is -0.26, we would take the exponential of the coefficient (i.e., exp(-0.26)) to get the time ratio. (Time Ratio: exp(-0.26) ≈ 0.78)\n\nSo, wars in the group `civil1` have a survival time that is approximately 0.78 times shorter (or 22% shorter) compared to wars in the reference group `civil0`, all other factors being equal.\n\nSince the coefficient is negative, it suggests that being in the `civil1` group is associated with shorter survival times (an accelerating effect on the event time) compared to the reference group `civil0`.\n\n**Interstate War**\n\nFor interstate war, the time Ratio: exp(0.9711) ≈ 2.6408 indicates that wars in the group `interst1` have a survival time that is approximately 2.64 times longer (or 164% longer) compared to wars in the reference group `interst0`, all other factors being equal.\n\nSince the coefficient is positive, it suggests that being in the `interst1` group is associated with longer survival times (a decelerating effect on the event time) compared to the reference group `interst0.`\n\n# Python Solution\n\n## A Null model\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# https://lifelines.readthedocs.io/en/latest/Survival%20Regression.htmlAC\n\ndf = r.un_df_num\ndf['Intercept'] = 1.\n\n# create parameters <-> covariates dict\n# The values in the dict become can be formulas, or column names in lists:\nregressors = {\n    'mu_': df.columns.difference(['failed', 'duration']),\n    'sigma_': [\"wartype\", \"Intercept\"],\n    'lambda_': 'wartype + 1',\n}\n\n# this will regress df against all 3 parameters\n# gg_model = GeneralizedGammaRegressionFitter(penalizer=1.).\\\n#     fit(df, 'duration', 'failed')\n\ngg_model = GeneralizedGammaRegressionFitter(penalizer=0.0001).\\\n    fit(df, 'duration', 'failed', regressors=regressors)\n    \ngg_model.print_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<lifelines.GeneralizedGammaRegressionFitter: fitted with 54 total observations, 15 right-censored observations>\n             duration col = 'duration'\n                event col = 'failed'\n                penalizer = 0.0001\n   number of observations = 54\nnumber of events observed = 39\n           log-likelihood = -196.38\n         time fit was run = 2023-08-24 02:16:45 UTC\n\n---\n                    coef  exp(coef)   se(coef)   coef lower 95%   coef upper 95%  exp(coef) lower 95%  exp(coef) upper 95%\nparam   covariate                                                                                                         \nmu_     Intercept   2.69      14.73       1.31             0.11             5.27                 1.12               193.60\n        wartype     0.10       1.11       0.57            -1.02             1.23                 0.36                 3.41\nsigma_  wartype     0.21       1.23       0.77            -1.29             1.71                 0.27                 5.53\n        Intercept  -0.21       0.81       0.27            -0.74             0.32                 0.48                 1.38\nlambda_ Intercept  -0.71       0.49       0.13            -0.97            -0.46                 0.38                 0.63\n        wartype    -0.22       0.80       0.42            -1.04             0.60                 0.35                 1.82\n\n                    cmp to     z      p   -log2(p)\nparam   covariate                                 \nmu_     Intercept     0.00  2.05   0.04       4.62\n        wartype       0.00  0.18   0.86       0.22\nsigma_  wartype       0.00  0.27   0.78       0.35\n        Intercept     0.00 -0.78   0.44       1.20\nlambda_ Intercept     0.00 -5.47 <0.005      24.38\n        wartype       0.00 -0.52   0.60       0.74\n---\nAIC = 404.76\nlog-likelihood ratio test = 1.90 on 3 df\n-log2(p) of ll-ratio test = 0.75\n```\n:::\n:::\n\n\nCumulative Hazard Rates\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngg_model.plot()\nplt.show();\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\n## Monotonic and non-monotonic distributions\n\n::: callout-tip\n## Prompt:\n\nHere I choose one monotonic distribution and one non-monotonic distribution and estimate additional parametric survival models and interpret the results. \n:::\n\n::: panel-tabset\n# R Solution\n\n**Monotonic Distribution**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estimate parametric models - Generalized gamma\n\nmonot_fit <- flexsurvreg(\n  formula = \n    Surv(time = duration,\n         event = failed) ~ wartype,\n  data = un_df_cat,\n  dist = \"weibull\"\n  )\n\nmonot_fit \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nflexsurvreg(formula = Surv(time = duration, event = failed) ~ \n    wartype, data = un_df_cat, dist = \"weibull\")\n\nEstimates: \n                data mean  est       L95%      U95%      se        exp(est)\nshape                 NA     0.8069    0.6331    1.0285    0.0999        NA\nscale                 NA    72.8156   43.2961  122.4616   19.3139        NA\nwartypecivil      0.2593    -1.1004   -1.9741   -0.2267    0.4458    0.3327\nwartypeinterst    0.1852     1.7368    0.5284    2.9452    0.6165    5.6793\n                L95%      U95%    \nshape                 NA        NA\nscale                 NA        NA\nwartypecivil      0.1389    0.7972\nwartypeinterst    1.6963   19.0152\n\nN = 54,  Events: 39,  Censored: 15\nTotal time at risk: 3994\nLog-likelihood = -201.1528, df = 4\nAIC = 410.3055\n```\n:::\n:::\n\n\n**Non-Monotonic Distribution**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estimate parametric models - Generalized gamma\n\nnon_mono_fit <- flexsurvreg(\n  formula = \n    Surv(time = duration,\n         event = failed) ~ wartype,\n  data = un_df_cat,\n  dist = \"lognormal\"\n  )\n\nnon_mono_fit \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nflexsurvreg(formula = Surv(time = duration, event = failed) ~ \n    wartype, data = un_df_cat, dist = \"lognormal\")\n\nEstimates: \n                data mean  est     L95%    U95%    se      exp(est)  L95%  \nmeanlog             NA      3.592   3.081   4.103   0.261      NA        NA\nsdlog               NA      1.365   1.080   1.724   0.163      NA        NA\nwartypecivil     0.259     -0.590  -1.483   0.304   0.456   0.555     0.227\nwartypeinterst   0.185      1.385   0.319   2.451   0.544   3.995     1.376\n                U95%  \nmeanlog             NA\nsdlog               NA\nwartypecivil     1.355\nwartypeinterst  11.597\n\nN = 54,  Events: 39,  Censored: 15\nTotal time at risk: 3994\nLog-likelihood = -196.7765, df = 4\nAIC = 401.5531\n```\n:::\n:::\n\n\n# Python Solution\n\nWeibull Distribution\n\n\n::: {.cell}\n\n```{.python .cell-code}\nweibull_model = WeibullFitter().\\\n    fit(r.un_df_num['duration'], event_observed = r.un_df_num['failed'])\n\nprint(weibull_model.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              coef   se(coef)  coef lower 95%  ...         z         p   -log2(p)\nlambda_  87.564550  22.050354       44.346651  ...  3.925767  0.000086  13.497710\nrho_      0.636418   0.076044        0.487374  ... -4.781193  0.000002  19.130345\n\n[2 rows x 8 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# weibull_model.plot()\nweibull_model.plot()\nplt.show();\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# create an exponential model\nlogn_model = LogNormalFitter().\\\n    fit(r.un_df['duration'], event_observed = r.un_df['failed'])\n\nprint(logn_model.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            coef  se(coef)  coef lower 95%  ...          z             p    -log2(p)\nmu_     3.710521  0.220683        3.277989  ...  16.813784  1.934223e-63  208.329716\nsigma_  1.527447  0.182320        1.170107  ...   2.892978  3.816083e-03    8.033692\n\n[2 rows x 8 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nlogn_model.plot()\nplt.show();\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-22-3.png){width=672}\n:::\n:::\n\n:::\n\n## Estimate a Cox model\n\n::: callout-tip\n## Estimate a Cox model\n\nEstimate a Cox model and interpret the coefficient estimates.\n:::\n\n::: panel-tabset\n# R Solution\n\n<!-- https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html#The_Cox_regression_model -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(gtsummary)\nsummary(cox1 <- \n          coxph(Surv(time = duration,\n                     event = failed) ~ \n                  civil + interst, \n                data = un_df,\n                ties = \"efron\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ncoxph(formula = Surv(time = duration, event = failed) ~ civil + \n    interst, data = un_df, ties = \"efron\")\n\n  n= 54, number of events= 39 \n\n           coef exp(coef) se(coef)      z Pr(>|z|)  \ncivil    0.7561    2.1300   0.3798  1.991   0.0465 *\ninterst -0.8723    0.4180   0.5041 -1.730   0.0835 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n        exp(coef) exp(-coef) lower .95 upper .95\ncivil       2.130     0.4695    1.0118     4.484\ninterst     0.418     2.3923    0.1556     1.123\n\nConcordance= 0.619  (se = 0.042 )\nLikelihood ratio test= 9.32  on 2 df,   p=0.009\nWald test            = 8.65  on 2 df,   p=0.01\nScore (logrank) test = 9.5  on 2 df,   p=0.009\n```\n:::\n\n```{.r .cell-code}\n# cox1 %>% \n#   tbl_regression(exp = TRUE) \n\n# summary(cox2 <- \n#           coxph(Surv(time = duration,\n#                      event = failed) ~ \n#                   wartype, \n#                 data = un_df_cat,\n#                 ties = \"efron\"))\n\n# cox3 %>% \n#   tbl_regression(exp = TRUE)\n```\n:::\n\n\n**Cox proportional hazards regression** model is used to analyze the association between covariates and the hazard function (the risk of an event occurring at a specific time) in survival data. The Cox proportional hazards model assumes that the hazard for any individual is proportional to the hazard for any other individual at all time points. This means that the hazard ratio between two groups remains constant over time.\n\nAlternatively, we can think of the hazard rates obtained from the Cox proportional hazards model represent the estimated instantaneous risk of an event occurring at a particular time. More specifically, the hazard rate at a specific time represents the conditional probability that an event will occur at that time, given that the individual has survived up to that time and has the specific covariate values.\n\nIn the context of categorical covariates, the hazard rates obtained for different levels of the categorical variable indicate how the risk of the event changes over time compared to the reference group. A hazard rate greater than 1 indicates a higher risk (higher probability of an event occurring) relative to the reference group.\n\n`civil1`:\n\n-   Coefficient (beta): 0.76\n-   Hazard Ratio (exp(coef)): 2.13\n\nInterpretation: Individuals in the `civil1` group have a hazard (risk) of experiencing the event (ending of peacekeeping mission) approximately 2.13 times higher than individuals in the reference group `civil0`, all other factors being equal. (The coefficient is statistically significant at the 0.05 level)\n\n`interst1`:\n\n-   Coefficient (beta): -0.87\n-   Hazard Ratio (exp(coef)): 0.42\n\nInterpretation: Individuals in the `interst1` group have a hazard (risk) of experiencing the event approximately 0.42 times lower (or 58.2% lower) than individuals in the reference group `interst0`, all other factors being equal. (The coefficient is statistically significant at the 0.10 level)\n\n\n::: {.cell}\n\n:::\n\n\n# Python Solution\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncph_model = CoxPHFitter()\n\ncph_model.fit(r.un_df, \n    duration_col = 'duration', \n    event_col = 'failed', \n    formula = 'civil + interst')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<lifelines.CoxPHFitter: fitted with 54 total observations, 15 right-censored observations>\n```\n:::\n\n```{.python .cell-code}\nprint(cph_model.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               coef  exp(coef)  se(coef)  ...         z         p  -log2(p)\ncovariate                                 ...                              \ncivil      0.756088   2.129929  0.379778  ...  1.990868  0.046495  4.426767\ninterst   -0.872107   0.418070  0.504038  ... -1.730241  0.083587  3.580575\n\n[2 rows x 11 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ncph_model.plot()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](peacekeep_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## Question 5\n\n::: callout-tip\n## Prompt:\n\nOf the four estimated models, identify the \"best\"-fitting model and justify your selection. Produce plots of the survival function and hazard rate based on your chosen model.\n:::\n\nLet's pick the model with the lowest AIC:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = {\n  \"log Normal\": [round(logn_model.AIC_,2), round(logn_model.BIC_,2)],\n  \"Weibull\": [round(weibull_model.AIC_,2), round(weibull_model.BIC_,2)],\n  \"Gen Gamma\": [round(gg_model.AIC_,2), round(gg_model.BIC_,2)]\n}\n\npy_mod_metric = pd.DataFrame(data, index = [['AIC', 'BIC']]).\\\n    rename_axis(\"Metric\").\\\n    reset_index()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\npy$py_mod_metric %>% \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|Metric | log Normal| Weibull| Gen Gamma|\n|:------|----------:|-------:|---------:|\n|AIC    |     407.57|  423.97|    404.76|\n|BIC    |     411.55|  427.95|    404.72|\n:::\n:::\n\n\n\n:::\n\n## Consequences of an incorrect distribution\n\n::: callout-tip\n## Distributions\n\nUnderstand the consequences of estimating a parametric survival model with an incorrect distribution.\n:::\n\nIn short, the suitability of any distribution for your data depends on how well it fits the underlying data-generating process.\n\nBefore implementing a model, we must give thought to the data generating process or the underlying mechanism or model that generates the observed data. We represent these processes through distributions--and the respective distributional parameters. Using an incorrect parametric distribution (Weibull for instance) when the true distribution is Gamma can result in biased parameter estimates, poor model fit, and inaccurate survival predictions (among other things) because the respective distribution parameters (shape and scale) are significantly different.\n\n## Appendix\n\nI grabbed a picture of how my professor organized these models. I've kept this happy snap filed away.\n\n![](survivalmodels.jpg)\n",
    "supporting": [
      "peacekeep_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}