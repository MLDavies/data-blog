{
  "hash": "55cb6041b489c3411549c067928fa94e",
  "result": {
    "markdown": "---\ntitle: \"Insurgent (Pairwise) Networks\"\nauthor: \"Michael L. Davies\"\ndate: \"2023-08-20\"\nformat:\n  html:\n    # embed-resources: true\n    code-fold: true\n    code-tools:\n      source: false\n      toggle: true\n      caption: \"Show the code\"\n    code-summary: \"Show the code\"\n    # theme: flatly\n    # theme: slate\n    # keep-md: true\neditor: visual\ntoc: true\nnumber-sections: false\nexecute: \n  warning: false\n  message: false\n  error: false\n  echo: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(rsvg)\nlibrary(cowplot)\nlibrary(ggtext)\nlibrary(igraph)\nlibrary(devtools)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_acled_syr <- \n  read_csv(\"df_acled_syr_2017_2021.csv\") |> \n  filter(!year %in% c(\"2021\", \"2020\"),\n         !event_type %in% c(\"Protests\", \"Riots\", \"Violence against civilians\")) |> \n  select(actor1, assoc_actor_1) |> \n  mutate(actor1 = str_squish(actor1),\n         assoc_actor_1 = str_squish(assoc_actor_1)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate assoc actors to get all pairwise partnerships'\ndf_separate_cross_product <- \n  df_acled_syr |> \n  # use only actors with multiple associated actors\n  filter(str_detect(assoc_actor_1, \";\")) |>\n  separate_rows(assoc_actor_1, sep = \";\") |>\n  mutate(assoc_actor_1 = str_squish(assoc_actor_1)) |> \n  pivot_longer(actor1:assoc_actor_1) |> \n  select(value) |> \n  distinct(value) |> \n  mutate(value2 = value) |> \n  expand(value, value2) |> \n  filter(value !=value2) |> \n  mutate(helper = str_c(value,value2)) |> \n  rowwise() |> \n  mutate(helper = str_c(str_sort(unlist(str_split(helper, \"\"))),collapse = \"\")) |> \n  distinct(helper,.keep_all = T) |> \n  select(-helper) |> \n  rename(actor1 = value, assoc_actor_1 = value2)\n\n# bind back with actors that don't have multiple assoc actors\nreshaped_df <- df_acled_syr |> \n  filter(!str_detect(assoc_actor_1, \";\")) |>\n  bind_rows(df_separate_cross_product)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a lookup table for groups to remove\nremove_groups <-\n  c(\"Military Forces\", \"Police Forces\", \n    \"Operations Room\", \"Opposition Rebels\", \n    \"Alliance/Named Operation\", \"Tribal\", \n    \"Military Council\", \"Communal Militias\", \n    \"Civilians\", \"SDF\", \"Islamic State\")\n\ndf_acled_actors <- \n  reshaped_df |>\n  mutate(\n    across(\n      actor1:assoc_actor_1,\n      ~ case_when(\n        str_detect(.x, \"Military Forces|Government|Allied Syrian\") ~ \"Military Forces\",\n        str_detect(.x, \"Unidentified Armed|Opposition Rebels|Islamist|Sunni Muslim|JSH\") ~ \"Opposition Rebels\",\n        str_detect(.x, \"Police Forces\") ~ \"Police Forces\",\n        str_detect(.x, \"HXP|QSD|YPG|YPJ|Liberation Army of Afrin|Menbij Internal|Asayish|Syriac\") ~ \"SDF\",\n        str_detect(.x, \"HTS|JFS|Jabhat Fateh al Sham\") ~ \"Hayat Tahrir al Sham\",\n        str_detect(.x, \"Hamza Division|Hamza Brigade\") ~ \"Hamza Division\", \n        str_detect(.x, \"AAS:\") ~ \"Ahrar al Sham\", \n        str_detect(.x, \"Al Sham Corps|Al Sham Division\") ~ \"Faylaq al Sham\",\n        str_detect(.x, \"HNDZ\") ~ \"Nour al Din al Zinki\",\n        str_detect(.x, \"Sharqiya Army\") ~ \"Jaysh Sharqiya\",\n        str_detect(.x, \"Liwa al Aqsa\") ~ \"Jund al Aqsa\",\n        str_detect(.x, \"FaR:\") ~ \"Faylaq al Rahman\",\n        str_detect(.x, \"JaS:\") ~ \"Levant Front\",\n        str_detect(.x, \"Sultan Suleiman Shah\") ~ \"Sultan Suleiman Shah\",\n        str_detect(.x, \"Operations Room\") ~ \"Operations Room\",\n        str_detect(.x, \"Operation Room\") ~ \"Operations Room\",\n        str_detect(.x, \"Wa Harredh al Moa'mineen\") ~ \"Operations Room\",\n        str_detect(.x, \"JWS:|JTW:|JTS:|Euphrates Shield|Peace Spring\") ~ \"Alliance/Named Operation\",\n        str_detect(.x, \"Islamic State\") ~ \"Islamic State\",\n        str_detect(.x, \"Tribal\") ~ \"Tribal\",\n        str_detect(.x, \"Military Council\") ~ \"Military Council\",\n        str_detect(.x, \"TIP:\") ~ \"Turkistan Islamic Party\",\n        str_detect(.x, \"Communal\") ~ \"Communal Militias\",\n        str_detect(.x, \"Kurdish Ethnic\") ~ \"Kurdish Ethnic Militia\",\n        str_detect(.x, \"JaT:\") ~ \"Army of the Revolutionaries\",\n        str_detect(.x, \"Sultan Murad\") ~ \"Sultan Murad\",\n        str_detect(.x, \"Ansar al Din\") ~ \"Ansar al Din\",\n        str_detect(.x, \"JOS:\") ~ \"Lions of the East\",\n        str_detect(.x, \"LAS\") ~ \"Northern Storm Brigade\",\n        str_detect(.x, \"Civilians|Protesters|Rioters|Aid Workers|Women|Farmers|Refugees|Prisoners|Journalists|\") ~ \"Civilians\",\n        TRUE ~ .x\n      ))) |>\n  \n  # remove civilans, state forces or unidentified groups\n  filter(!actor1 %in% remove_groups,\n         !assoc_actor_1 %in% remove_groups,\n         actor1 != assoc_actor_1) |> \n  \n  # Get the top/most groups by number of operations\n  mutate(actor1 = fct_lump(actor1, 10),\n         assoc_actor_1 = fct_lump(assoc_actor_1, 15)) |> \n  filter(actor1 != \"Other\",\n         assoc_actor_1 != \"Other\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create nodes with count of times each actor appears in dataset\ndf_nodes <- \n  df_acled_actors |> \n  pivot_longer(cols = actor1:assoc_actor_1,\n               names_to = \"cols\",\n               values_to = \"Name\") |> \n  group_by(Name) |> \n  summarize(count = n()) |> \n  ungroup() |> \n  #mutate(countG = cut(count, breaks = c(-Inf, 21, 24, 43, Inf))) |> \n  mutate(countG = case_when(\n    count < 21 ~ \"Least\",\n    count < 25 ~ \"Less\",\n    count < 44 ~ \"More\",\n    TRUE ~ \"Most\"\n  ))\n\n# from original df, weight is the count of how often the two actors work together\n# igraph looks for \"from\", \"to\", and \"weight\"\ndf_edges <- \n  df_acled_actors |>\n  count(actor1,assoc_actor_1) |> \n  rename(weight = n,\n         from = actor1,\n         to = assoc_actor_1)\n\ngraph <- \n  graph_from_data_frame(\n  df_edges, \n  vertices = df_nodes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphed <-\n  graph |> \n  ggraph(layout = 'linear', \n         circular = TRUE) +\n  ggraph::geom_edge_arc(\n    aes(alpha = weight),\n    width = 1,\n    show.legend = FALSE,\n    color = \"grey20\"\n  ) +\n  ggraph::geom_node_point(aes(color = countG)) +\n  ggraph::geom_node_label(\n    aes(label = name, \n        color = countG),\n    alpha = .75,\n    label.size = NA,\n    fill = \"#F3F3F3\", \n    size = 3,\n    repel = F,\n    fontface = \"bold\"\n  ) +\n  labs(\n    title = \"Syrian Opposition: Never go it alone!\",\n    subtitle = \"<b>Bolder lines</b> indicate more <i>joint</i> combat operations with that partner.\n           <br>Colors indicate frequency of <i>total</i> combat operations:\n           <br><b style='color:black'> Most Frequent</b>,\n           <b style='color:#450D54'> More Frequent</b>,\n           <b style='color:#557C9B'> Less Frequent</b>, and \n           <b style='color:#94B147'>Least Frequent</b>\",\n    caption = \"Data:  <b>'ACLED Event Data 2017-2020'</b> (acleddata.com)<br> Visualisation by <b>Michael Davies</b>\"\n  ) +\n  theme_void() +\n  theme(\n    # margins: top, right, bottom, and left\n    plot.margin = margin(0.7, 0.7, 0.7, 0.7, \"cm\"),\n    plot.title = element_text(size = 20, color = \"grey30\", face = \"bold\"),\n    plot.title.position = 'plot',\n    plot.subtitle = element_markdown(lineheight = 1.2),\n    plot.caption = element_markdown(size = 8),\n    plot.caption.position = 'plot',\n    plot.background = element_rect(color = NA, fill = NA),\n    legend.position = \"none\",\n  ) +\n  scale_color_manual(values = c(\"#94B147\", \"#557C9B\", \"#450D54\", \"black\")) +\n  coord_fixed(ratio = 0.6, clip = \"off\")\n\n\nlibrary(magick)\nimg <- \n  image_read(\"jihadi.PNG\") |>\n  image_resize(\"570x380\") |>\n  image_transparent(\"grey\", fuzz = 35)\n\nggdraw() + \n  draw_plot(\n    ggplot() + \n      theme_void() + \n      theme(\n        plot.background = element_rect(color = NA, fill = \"#F3F3F3\") \n      )) +\n  draw_image(interpolate = F, \n             img, \n             scale = .35, \n             x = 0, \n             y = 0) +\n  draw_plot(graphed) \n```\n\n::: {.cell-output-display}\n![](network_pairwise_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "network_pairwise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}