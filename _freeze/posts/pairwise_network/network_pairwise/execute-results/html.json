{
  "hash": "e353b824c30526b1b87266188fb55a14",
  "result": {
    "markdown": "---\ntitle: \"Insurgent (Pairwise) Networks\"\nsubtitle: \"Conflict makes for strange bedfellows\"\nauthor: \"Michael L. Davies\"\ndate: \"2023-08-21\"\nformat:\n  html:\n    # embed-resources: true\n    code-fold: true\n    code-tools:\n      source: false\n      toggle: true\n      caption: \"Show the code\"\n    code-summary: \"Show the code\"\n    # theme: flatly\n    # theme: slate\n    # keep-md: true\neditor: visual\ntoc: true\nnumber-sections: false\nexecute: \n  warning: false\n  message: false\n  error: false\n  echo: true\n---\n\n\nDuring the height of the Syrian civil war, many of us watching from afar were puzzled when \"moderate\" insurgent groups would jump into bed (or alliances) with hardliners or jihadists. The Syrian conflict had hundreds, maybe thousands, of armed groups forming various kinds of alliances, then divorcing only to reconcile again.\n\nA lot is made of the role of ideology when armchair commanders (like myself) comment as these disasters play out. On the other hand, alliances could be a pragmatic choice. By aggregating combat power, armed groups might increase their chances of survival—even if only to turn on each other at a later stage.\n\nIn fact, I recently read a compelling argument on this topic: \"[Alliance Formation in Civil Wars](https://www.amazon.com/Alliance-Formation-Professor-Fotini-Christia/dp/1107683483/ref=sr_1_1?keywords=alliance+formation+in+civil+wars&qid=1692661337&s=books&sprefix=alliance+formation%2Cstripbooks%2C100&sr=1-1)\" by Fotini Christia. In this book, Christia states: \"It would be natural to suppose that warring groups form alliances based on shared identity considerations—such as Christian groups allying with Christian groups or Muslim groups with their fellow co-religionists—but this is not what we see.\"\n\nSo, with that motivation, I decided to explore what we could find among Syrian armed groups. When coalitions of Syrian armed groups engaged in battles, they frequently partnered with several groups. So, my question was: would groups tolerate fighting alongside other groups that are ideological enemies? So, I'm focusing on pairwise relationships, even when there are many groups in the alliance.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(rsvg)\nlibrary(cowplot)\nlibrary(ggtext)\nlibrary(igraph)\nlibrary(devtools)\n```\n:::\n\n\n## Data\n\n::: callout-important\n## A love affair with ACLED data! \n\nI came across the [Armed Conflict Location & Event Data Project(ACLED)](www.acleddata.com) a few years ago. What an amazing resource. ACLED collects real time and historical data on political violence and protest events in nearly 100 countries. \n:::\n\nACLED data is robust, with many columns and over many years. I'm only concerned with the `actor1` and `assoc_actor_1` columns.  Let's just take a quick peak:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"df_acled_syr_2017_2021.csv\") |> \n  select(year, event_date, event_type, actor1, assoc_actor_1) |> \n  filter(!is.na(assoc_actor_1)) |>\n  slice_head(n = 5) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n| year|event_date |event_type                 |actor1                           |assoc_actor_1                                                |\n|----:|:----------|:--------------------------|:--------------------------------|:------------------------------------------------------------|\n| 2021|2021-02-05 |Battles                    |Operation Peace Spring           |JWS: Syrian National Army; Military Forces of Turkey (2016-) |\n| 2021|2021-02-05 |Battles                    |Opposition Rebels (Syria)        |Military Forces of Turkey (2016-)                            |\n| 2021|2021-02-05 |Explosions/Remote violence |Al Fath Al Mubeen Operation Room |Opposition Rebels (Syria)                                    |\n| 2021|2021-02-05 |Battles                    |Military Forces of Syria (2000-) |Militia (Pro-Government)                                     |\n| 2021|2021-02-04 |Explosions/Remote violence |Opposition Rebels (Syria)        |Military Forces of Turkey (2016-)                            |\n:::\n:::\n\n\nAnd I need select the columns of interest and then filter down to battle related events (filtering out `Protests`, `Riots`, and `Violence against civilians`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_acled_syr <- \n  read_csv(\"df_acled_syr_2017_2021.csv\") |> \n  filter(year %in% 2017:2019,\n         event_type %in% c(\"Explosions/Remote violence\",\n                           \"Battles\",\n                           \"Strategic developments\")) |> \n  select(actor1, assoc_actor_1) |> \n  mutate(actor1 = str_squish(actor1),\n         assoc_actor_1 = str_squish(assoc_actor_1)) \n```\n:::\n\n\nHere's the difficult part. The reduced ACLED data looks akin to this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(test <- tibble::tibble(\n  actor1 = c(\"A\", \"A\", \"B\"),\n  assoc_actor_1 = c(\"B\", \"B; C\", \"C; D; E\"))) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|actor1 |assoc_actor_1 |\n|:------|:-------------|\n|A      |B             |\n|A      |B; C          |\n|B      |C; D; E       |\n:::\n:::\n\n\n\nAnd I want to get all combinations of pairwise relationships. So, I need to work out and test the code to accomplish this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| # Separate assoc actors to get all pairwise partnerships'\ndf <- \n  test |> \n  # use only actors with multiple associated actors\n  filter(str_detect(assoc_actor_1, \";\")) |>\n  separate_rows(assoc_actor_1, sep = \";\") |>\n  mutate(assoc_actor_1 = str_squish(assoc_actor_1)) |> \n  pivot_longer(actor1:assoc_actor_1) |> \n  select(value) |> \n  distinct(value) |> \n  mutate(value2 = value) |> \n  expand(value, value2) |> \n  filter(value !=value2) |> \n  mutate(helper = str_c(value,value2)) |> \n  rowwise() |> \n  mutate(helper = str_c(str_sort(unlist(str_split(helper, \"\"))),collapse = \"\")) |> \n  distinct(helper,.keep_all = T) |> \n  select(-helper) |> \n  rename(actor1 = value, assoc_actor_1 = value2)\n\n# bind back with actors that don't have multiple assoc actors\ntest |> \n  filter(!str_detect(assoc_actor_1, \";\")) |>\n  bind_rows(df) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|actor1 |assoc_actor_1 |\n|:------|:-------------|\n|A      |B             |\n|A      |B             |\n|A      |C             |\n|A      |D             |\n|A      |E             |\n|B      |C             |\n|B      |D             |\n|B      |E             |\n|C      |D             |\n|C      |E             |\n|D      |E             |\n:::\n:::\n\n\nThat looks good! Let's apply it to the acled data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate assoc actors to get all pairwise partnerships'\ndf_separate <- \n  df_acled_syr |> \n  # use only actors with multiple associated actors\n  filter(str_detect(assoc_actor_1, \";\")) |>\n  separate_rows(assoc_actor_1, sep = \";\") |>\n  mutate(assoc_actor_1 = str_squish(assoc_actor_1)) |> \n  pivot_longer(actor1:assoc_actor_1) |> \n  select(value) |> \n  distinct(value) |> \n  mutate(value2 = value) |> \n  expand(value, value2) |> \n  filter(value !=value2) |> \n  mutate(helper = str_c(value,value2)) |> \n  rowwise() |> \n  mutate(helper = str_c(str_sort(unlist(str_split(helper, \"\"))),collapse = \"\")) |> \n  distinct(helper,.keep_all = T) |> \n  select(-helper) |> \n  rename(actor1 = value, assoc_actor_1 = value2)\n\n# bind back with actors that don't have multiple assoc actors\nreshaped_df <- df_acled_syr |> \n  filter(!str_detect(assoc_actor_1, \";\")) |>\n  bind_rows(df_separate)\n```\n:::\n\n\nOk, I have to confess. This next part stumped me and took forever. First, a huge shout out to Wikipedia contributors. There are soooo many actors in the dataset. I spend much more time than intended trying to consolidate them. \n\nSecond, I needed to clean and consolidate the actors, and then remove the non-armed-opposition groups. I tried several ways to make happen much more parsimoniously with `sapply` and `purrr::map` and a two-column lookup table, but it beat me. If you have suggestions, I'm eager to hear them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a lookup table for groups to remove\nremove_groups <-\n  c(\"Military Forces\", \"Police Forces\", \n    \"Operations Room\", \"Opposition Rebels\", \n    \"Alliance/Named Operation\", \"Tribal\", \n    \"Military Council\", \"Communal Militias\", \n    \"Civilians\", \"SDF\", \"Islamic State\")\n\ndf_acled_actors <- \n  reshaped_df |>\n  mutate(\n    across(\n      actor1:assoc_actor_1,\n      ~ case_when(\n        str_detect(.x, \"Military Forces|Government|Allied Syrian\") ~ \"Military Forces\",\n        str_detect(.x, \"Unidentified Armed|Opposition Rebels|Islamist|Sunni Muslim|JSH\") ~ \"Opposition Rebels\",\n        str_detect(.x, \"Police Forces\") ~ \"Police Forces\",\n        str_detect(.x, \"HXP|QSD|YPG|YPJ|Liberation Army of Afrin|Menbij Internal|Asayish|Syriac\") ~ \"SDF\",\n        str_detect(.x, \"HTS|JFS|Jabhat Fateh al Sham\") ~ \"Hayat Tahrir al Sham\",\n        str_detect(.x, \"Hamza Division|Hamza Brigade\") ~ \"Hamza Division\", \n        str_detect(.x, \"AAS:\") ~ \"Ahrar al Sham\", \n        str_detect(.x, \"Al Sham Corps|Al Sham Division\") ~ \"Faylaq al Sham\",\n        str_detect(.x, \"HNDZ\") ~ \"Nour al Din al Zinki\",\n        str_detect(.x, \"Sharqiya Army\") ~ \"Jaysh Sharqiya\",\n        str_detect(.x, \"Liwa al Aqsa\") ~ \"Jund al Aqsa\",\n        str_detect(.x, \"FaR:\") ~ \"Faylaq al Rahman\",\n        str_detect(.x, \"JaS:\") ~ \"Levant Front\",\n        str_detect(.x, \"Sultan Suleiman Shah\") ~ \"Sultan Suleiman Shah\",\n        str_detect(.x, \"Operations Room\") ~ \"Operations Room\",\n        str_detect(.x, \"Operation Room\") ~ \"Operations Room\",\n        str_detect(.x, \"Wa Harredh al Moa'mineen\") ~ \"Operations Room\",\n        str_detect(.x, \"JWS:|JTW:|JTS:|Euphrates Shield|Peace Spring\") ~ \"Alliance/Named Operation\",\n        str_detect(.x, \"Islamic State\") ~ \"Islamic State\",\n        str_detect(.x, \"Tribal\") ~ \"Tribal\",\n        str_detect(.x, \"Military Council\") ~ \"Military Council\",\n        str_detect(.x, \"TIP:\") ~ \"Turkistan Islamic Party\",\n        str_detect(.x, \"Communal\") ~ \"Communal Militias\",\n        str_detect(.x, \"Kurdish Ethnic\") ~ \"Kurdish Ethnic Militia\",\n        str_detect(.x, \"JaT:\") ~ \"Army of the Revolutionaries\",\n        str_detect(.x, \"Sultan Murad\") ~ \"Sultan Murad\",\n        str_detect(.x, \"Ansar al Din\") ~ \"Ansar al Din\",\n        str_detect(.x, \"JOS:\") ~ \"Lions of the East\",\n        str_detect(.x, \"LAS\") ~ \"Northern Storm Brigade\",\n        str_detect(.x, \"Civilians|Protesters|Rioters|Aid Workers|Women|Farmers|Refugees|Prisoners|Journalists|\") ~ \"Civilians\",\n        TRUE ~ .x\n      ))) |>\n  \n  # remove civilans, state forces or unidentified groups\n  filter(!actor1 %in% remove_groups,\n         !assoc_actor_1 %in% remove_groups,\n         actor1 != assoc_actor_1) |> \n  \n  # Get the top/most groups by number of operations\n  mutate(actor1 = fct_lump(actor1, 10),\n         assoc_actor_1 = fct_lump(assoc_actor_1, 15)) |> \n  filter(actor1 != \"Other\",\n         assoc_actor_1 != \"Other\")\n```\n:::\n\n\nNow to prep the data for graphing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create nodes with count of times each actor appears in dataset\ndf_nodes <- \n  df_acled_actors |> \n  pivot_longer(cols = actor1:assoc_actor_1,\n               names_to = \"cols\",\n               values_to = \"Name\") |> \n  group_by(Name) |> \n  summarize(count = n()) |> \n  ungroup() |> \n  #mutate(countG = cut(count, breaks = c(-Inf, 21, 24, 43, Inf))) |> \n  mutate(countG = case_when(\n    count < 21 ~ \"Least\",\n    count < 25 ~ \"Less\",\n    count < 44 ~ \"More\",\n    TRUE ~ \"Most\"\n  ))\n\n# from original df, weight is the count of how often the two actors work together\n# igraph looks for \"from\", \"to\", and \"weight\"\ndf_edges <- \n  df_acled_actors |>\n  count(actor1,assoc_actor_1) |> \n  rename(weight = n,\n         from = actor1,\n         to = assoc_actor_1)\n\ngraph <- \n  graph_from_data_frame(\n  df_edges, \n  vertices = df_nodes)\n```\n:::\n\n\nAnd at last, let's generate a pairwise network plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphed <-\n  graph |> \n  ggraph(layout = 'linear', \n         circular = TRUE) +\n  ggraph::geom_edge_arc(\n    aes(alpha = weight),\n    width = 1,\n    show.legend = FALSE,\n    color = \"grey20\"\n  ) +\n  ggraph::geom_node_point(aes(color = countG)) +\n  ggraph::geom_node_label(\n    aes(label = name, \n        color = countG),\n    alpha = .75,\n    label.size = NA,\n    fill = \"#F3F3F3\", \n    size = 3,\n    repel = F,\n    fontface = \"bold\"\n  ) +\n  labs(\n    title = \"Syrian Opposition: Never go it alone!\",\n    subtitle = \"<b>Bolder lines</b> indicate more <i>joint</i> combat operations with that partner.\n           <br>Colors indicate frequency of <i>total</i> combat operations:\n           <br><b style='color:black'> Most Frequent</b>,\n           <b style='color:#450D54'> More Frequent</b>,\n           <b style='color:#557C9B'> Less Frequent</b>, and \n           <b style='color:#94B147'>Least Frequent</b>\",\n    caption = \"Data:  <b>'ACLED Event Data 2017-2020'</b> (acleddata.com)<br> Visualisation by <b>Michael Davies</b>\"\n  ) +\n  theme_void() +\n  theme(\n    # margins: top, right, bottom, and left\n    plot.margin = margin(0.7, 0.7, 0.7, 0.7, \"cm\"),\n    plot.title = element_text(size = 20, color = \"grey30\", face = \"bold\"),\n    plot.title.position = 'plot',\n    plot.subtitle = element_markdown(lineheight = 1.2),\n    plot.caption = element_markdown(size = 8),\n    plot.caption.position = 'plot',\n    plot.background = element_rect(color = NA, fill = NA),\n    legend.position = \"none\",\n  ) +\n  scale_color_manual(values = c(\"#94B147\", \"#557C9B\", \"#450D54\", \"black\")) +\n  coord_fixed(ratio = 0.6, clip = \"off\")\n\n\nlibrary(magick)\nimg <- \n  image_read(\"jihadi.PNG\") |>\n  image_resize(\"570x380\") |>\n  image_transparent(\"grey\", fuzz = 35)\n\nggdraw() + \n  draw_plot(\n    ggplot() + \n      theme_void() + \n      theme(\n        plot.background = element_rect(color = NA, fill = \"#F3F3F3\") \n      )) +\n  draw_image(interpolate = F, \n             img, \n             scale = .35, \n             x = 0, \n             y = 0) +\n  draw_plot(graphed) \n```\n\n::: {.cell-output-display}\n![](network_pairwise_files/figure-html/unnamed-chunk-9-1.png){width=768}\n:::\n:::\n\n\n\nAhhh the tangled web they weave. I have been mixing a few metaphors.",
    "supporting": [
      "network_pairwise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}